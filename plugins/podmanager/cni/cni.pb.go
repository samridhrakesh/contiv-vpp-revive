// Copyright (c) 2017 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: cni.proto

// Package cni provides remote CNI functionality over gRPC. It follows
// the CNI specification at https://github.com/containernetworking/cni/blob/master/SPEC.md

package cni

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CNIReply_Interface_IP_Version int32

const (
	CNIReply_Interface_IP_IPV4 CNIReply_Interface_IP_Version = 0
	CNIReply_Interface_IP_IPV6 CNIReply_Interface_IP_Version = 1
)

// Enum value maps for CNIReply_Interface_IP_Version.
var (
	CNIReply_Interface_IP_Version_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
	}
	CNIReply_Interface_IP_Version_value = map[string]int32{
		"IPV4": 0,
		"IPV6": 1,
	}
)

func (x CNIReply_Interface_IP_Version) Enum() *CNIReply_Interface_IP_Version {
	p := new(CNIReply_Interface_IP_Version)
	*p = x
	return p
}

func (x CNIReply_Interface_IP_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CNIReply_Interface_IP_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_cni_proto_enumTypes[0].Descriptor()
}

func (CNIReply_Interface_IP_Version) Type() protoreflect.EnumType {
	return &file_cni_proto_enumTypes[0]
}

func (x CNIReply_Interface_IP_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

func RegisterRemoteCNIServer(s *grpc.Server, srv RemoteCNIServer) {
	s.RegisterService(&_RemoteCNI_serviceDesc, srv)
}


// Deprecated: Use CNIReply_Interface_IP_Version.Descriptor instead.
func (CNIReply_Interface_IP_Version) EnumDescriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{1, 0, 0, 0}
}

// The request to add a container to network. Corresponds to the CNI specification
// at https://github.com/containernetworking/cni/blob/master/SPEC.md#parameters
type CNIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of CNI spec that the caller is using (container management system or the invoking plugin).
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Container ID unique across an administrative domain while the container is live.
	ContainerId string `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Path to the network namespace to be added, i.e. /proc/[pid]/ns/net or a bind-mount/link to it.
	NetworkNamespace string `protobuf:"bytes,3,opt,name=network_namespace,json=networkNamespace,proto3" json:"network_namespace,omitempty"`
	// Name of the interface inside the container. This is the name that should be assigned to the interface created inside the container (network namespace); consequently it must comply with the standard Linux restrictions on interface names.
	InterfaceName string `protobuf:"bytes,4,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// Network configuration. This is a JSON document describing a network to which a container can be joined. Optional.
	ExtraNwConfig string `protobuf:"bytes,5,opt,name=extra_nw_config,json=extraNwConfig,proto3" json:"extra_nw_config,omitempty"`
	// Extra arguments passed to CNI plugin. Optional.
	ExtraArguments string `protobuf:"bytes,6,opt,name=extra_arguments,json=extraArguments,proto3" json:"extra_arguments,omitempty"`
	// IPAM type (plugin name) configured for the CNI (empty for Contiv-internal IPAM).
	IpamType string `protobuf:"bytes,7,opt,name=ipam_type,json=ipamType,proto3" json:"ipam_type,omitempty"`
	// result of the IPAM plugin if it was configured for the CNI (empty for Contiv-internal IPAM).
	IpamData string `protobuf:"bytes,8,opt,name=ipam_data,json=ipamData,proto3" json:"ipam_data,omitempty"`
}

func (x *CNIRequest) Reset() {
	*x = CNIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNIRequest) ProtoMessage() {}

func (x *CNIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNIRequest.ProtoReflect.Descriptor instead.
func (*CNIRequest) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{0}
}

func (x *CNIRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CNIRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *CNIRequest) GetNetworkNamespace() string {
	if x != nil {
		return x.NetworkNamespace
	}
	return ""
}

func (x *CNIRequest) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *CNIRequest) GetExtraNwConfig() string {
	if x != nil {
		return x.ExtraNwConfig
	}
	return ""
}

func (x *CNIRequest) GetExtraArguments() string {
	if x != nil {
		return x.ExtraArguments
	}
	return ""
}

func (x *CNIRequest) GetIpamType() string {
	if x != nil {
		return x.IpamType
	}
	return ""
}

func (x *CNIRequest) GetIpamData() string {
	if x != nil {
		return x.IpamData
	}
	return ""
}

// The response to the CNIRequest. Corresponds to the CNI specification
// at https://github.com/containernetworking/cni/blob/master/SPEC.md#parameters
type CNIReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result code. 0 = success, non-zero = error.
	Result uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	// Error string in case that result != 0.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// List of interfaces connected to the container.
	Interfaces []*CNIReply_Interface `protobuf:"bytes,4,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	// List of routes configured in the container.
	Routes []*CNIReply_Route `protobuf:"bytes,5,rep,name=routes,proto3" json:"routes,omitempty"`
	// DNS entries. Repeated only because it is optional, normally there should be only one dns member.
	Dns []*CNIReply_DNS `protobuf:"bytes,6,rep,name=dns,proto3" json:"dns,omitempty"`
}

func (x *CNIReply) Reset() {
	*x = CNIReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNIReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNIReply) ProtoMessage() {}

func (x *CNIReply) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNIReply.ProtoReflect.Descriptor instead.
func (*CNIReply) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{1}
}

func (x *CNIReply) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *CNIReply) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CNIReply) GetInterfaces() []*CNIReply_Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *CNIReply) GetRoutes() []*CNIReply_Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CNIReply) GetDns() []*CNIReply_DNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

// Interface details, as described in https://github.com/containernetworking/cni/blob/master/SPEC.md#result
type CNIReply_Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name if the interface.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// MAC address of the interface.
	Mac string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	// Details about the sandbox (if any) the interface is in. Can be a netns path, empty/omitted for host interfaces.
	Sandbox string `protobuf:"bytes,3,opt,name=sandbox,proto3" json:"sandbox,omitempty"`
	// List of IP addresses applied on the interface.
	IpAddresses []*CNIReply_Interface_IP `protobuf:"bytes,4,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
}

func (x *CNIReply_Interface) Reset() {
	*x = CNIReply_Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNIReply_Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNIReply_Interface) ProtoMessage() {}

func (x *CNIReply_Interface) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNIReply_Interface.ProtoReflect.Descriptor instead.
func (*CNIReply_Interface) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CNIReply_Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CNIReply_Interface) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *CNIReply_Interface) GetSandbox() string {
	if x != nil {
		return x.Sandbox
	}
	return ""
}

func (x *CNIReply_Interface) GetIpAddresses() []*CNIReply_Interface_IP {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

// Route details, as described in https://github.com/containernetworking/cni/blob/master/SPEC.md#routes
type CNIReply_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination subnet specified in CIDR notation.
	Dst string `protobuf:"bytes,1,opt,name=dst,proto3" json:"dst,omitempty"`
	// IP of the gateway. If omitted, a default gateway is assumed.
	Gw string `protobuf:"bytes,2,opt,name=gw,proto3" json:"gw,omitempty"`
}

func (x *CNIReply_Route) Reset() {
	*x = CNIReply_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNIReply_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNIReply_Route) ProtoMessage() {}

func (x *CNIReply_Route) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNIReply_Route.ProtoReflect.Descriptor instead.
func (*CNIReply_Route) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{1, 1}
}

func (x *CNIReply_Route) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *CNIReply_Route) GetGw() string {
	if x != nil {
		return x.Gw
	}
	return ""
}

// DNS details, as described in https://github.com/containernetworking/cni/blob/master/SPEC.md#dns
type CNIReply_DNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The local domain used for short hostname lookups.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// List of a priority-ordered list of DNS nameservers that this network is aware of.
	Nameservers []string `protobuf:"bytes,2,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
	// List of priority ordered search domains for short hostname lookups. Will be preferred over domain by most resolvers.
	Search []string `protobuf:"bytes,3,rep,name=search,proto3" json:"search,omitempty"`
	// Listt of options that can be passed to the resolver.
	Options []string `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *CNIReply_DNS) Reset() {
	*x = CNIReply_DNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNIReply_DNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNIReply_DNS) ProtoMessage() {}

func (x *CNIReply_DNS) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNIReply_DNS.ProtoReflect.Descriptor instead.
func (*CNIReply_DNS) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{1, 2}
}

func (x *CNIReply_DNS) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CNIReply_DNS) GetNameservers() []string {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

func (x *CNIReply_DNS) GetSearch() []string {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *CNIReply_DNS) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

// IP address details, as described in https://github.com/containernetworking/cni/blob/master/SPEC.md#ips
type CNIReply_Interface_IP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP version.
	Version CNIReply_Interface_IP_Version `protobuf:"varint,1,opt,name=version,proto3,enum=cni.CNIReply_Interface_IP_Version" json:"version,omitempty"`
	// IP address in CIDR notation (eg "192.168.1.3/24").
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The default gateway for this subnet, if one exists.
	Gateway string `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *CNIReply_Interface_IP) Reset() {
	*x = CNIReply_Interface_IP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cni_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNIReply_Interface_IP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNIReply_Interface_IP) ProtoMessage() {}

func (x *CNIReply_Interface_IP) ProtoReflect() protoreflect.Message {
	mi := &file_cni_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNIReply_Interface_IP.ProtoReflect.Descriptor instead.
func (*CNIReply_Interface_IP) Descriptor() ([]byte, []int) {
	return file_cni_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *CNIReply_Interface_IP) GetVersion() CNIReply_Interface_IP_Version {
	if x != nil {
		return x.Version
	}
	return CNIReply_Interface_IP_IPV4
}

func (x *CNIReply_Interface_IP) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CNIReply_Interface_IP) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

var File_cni_proto protoreflect.FileDescriptor

var file_cni_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x6e, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x6e, 0x69,
	0x22, 0xa8, 0x02, 0x0a, 0x0a, 0x43, 0x4e, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6e, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x4e, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x70, 0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x70, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x86, 0x05, 0x0a, 0x08,
	0x43, 0x4e, 0x49, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6e, 0x69,
	0x2e, 0x43, 0x4e, 0x49, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x43, 0x4e, 0x49, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x03,
	0x64, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6e, 0x69, 0x2e,
	0x43, 0x4e, 0x49, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x03, 0x64, 0x6e,
	0x73, 0x1a, 0xa2, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x12,
	0x3d, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x43, 0x4e, 0x49, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49,
	0x50, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x95,
	0x01, 0x0a, 0x02, 0x49, 0x50, 0x12, 0x3c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x43, 0x4e, 0x49,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x49, 0x50, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x1d, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x50, 0x56, 0x36, 0x10, 0x01, 0x1a, 0x29, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x67,
	0x77, 0x1a, 0x71, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x32, 0x60, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x4e,
	0x49, 0x12, 0x27, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x0f, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x43,
	0x4e, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6e, 0x69, 0x2e,
	0x43, 0x4e, 0x49, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x43, 0x4e, 0x49, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x63, 0x6e, 0x69, 0x2e, 0x43, 0x4e, 0x49, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x76, 0x2f, 0x76, 0x70, 0x70, 0x2f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2f, 0x70, 0x6f, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x63, 0x6e, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cni_proto_rawDescOnce sync.Once
	file_cni_proto_rawDescData = file_cni_proto_rawDesc
)

func file_cni_proto_rawDescGZIP() []byte {
	file_cni_proto_rawDescOnce.Do(func() {
		file_cni_proto_rawDescData = protoimpl.X.CompressGZIP(file_cni_proto_rawDescData)
	})
	return file_cni_proto_rawDescData
}

var file_cni_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cni_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cni_proto_goTypes = []interface{}{
	(CNIReply_Interface_IP_Version)(0), // 0: cni.CNIReply.Interface.IP.Version
	(*CNIRequest)(nil),                 // 1: cni.CNIRequest
	(*CNIReply)(nil),                   // 2: cni.CNIReply
	(*CNIReply_Interface)(nil),         // 3: cni.CNIReply.Interface
	(*CNIReply_Route)(nil),             // 4: cni.CNIReply.Route
	(*CNIReply_DNS)(nil),               // 5: cni.CNIReply.DNS
	(*CNIReply_Interface_IP)(nil),      // 6: cni.CNIReply.Interface.IP
}
var file_cni_proto_depIdxs = []int32{
	3, // 0: cni.CNIReply.interfaces:type_name -> cni.CNIReply.Interface
	4, // 1: cni.CNIReply.routes:type_name -> cni.CNIReply.Route
	5, // 2: cni.CNIReply.dns:type_name -> cni.CNIReply.DNS
	6, // 3: cni.CNIReply.Interface.ip_addresses:type_name -> cni.CNIReply.Interface.IP
	0, // 4: cni.CNIReply.Interface.IP.version:type_name -> cni.CNIReply.Interface.IP.Version
	1, // 5: cni.RemoteCNI.Add:input_type -> cni.CNIRequest
	1, // 6: cni.RemoteCNI.Delete:input_type -> cni.CNIRequest
	2, // 7: cni.RemoteCNI.Add:output_type -> cni.CNIReply
	2, // 8: cni.RemoteCNI.Delete:output_type -> cni.CNIReply
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_cni_proto_init() }
func file_cni_proto_init() {
	if File_cni_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cni_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNIReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNIReply_Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNIReply_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNIReply_DNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cni_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNIReply_Interface_IP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cni_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cni_proto_goTypes,
		DependencyIndexes: file_cni_proto_depIdxs,
		EnumInfos:         file_cni_proto_enumTypes,
		MessageInfos:      file_cni_proto_msgTypes,
	}.Build()
	File_cni_proto = out.File
	file_cni_proto_rawDesc = nil
	file_cni_proto_goTypes = nil
	file_cni_proto_depIdxs = nil
}
