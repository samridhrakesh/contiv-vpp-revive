// Copyright (c) 2018 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: nodeconfig.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NodeConfig is used to store Contiv-specific node configuration entered via CRD.
type NodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the node to which the configuration applies
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// main VPP interface used for the inter-node connectivity
	MainVppInterface *NodeConfig_InterfaceConfig `protobuf:"bytes,2,opt,name=main_vpp_interface,json=mainVppInterface,proto3" json:"main_vpp_interface,omitempty"`
	// other interfaces on VPP, not necessarily used for inter-node connectivity
	OtherVppInterfaces []*NodeConfig_InterfaceConfig `protobuf:"bytes,3,rep,name=other_vpp_interfaces,json=otherVppInterfaces,proto3" json:"other_vpp_interfaces,omitempty"`
	// interface to be stolen from the host stack and bound to VPP
	StealInterface string `protobuf:"bytes,4,opt,name=steal_interface,json=stealInterface,proto3" json:"steal_interface,omitempty"`
	// IP address of the default gateway
	Gateway string `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// whether to NAT external traffic or not
	NatExternalTraffic bool `protobuf:"varint,6,opt,name=nat_external_traffic,json=natExternalTraffic,proto3" json:"nat_external_traffic,omitempty"`
}

func (x *NodeConfig) Reset() {
	*x = NodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeconfig_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfig) ProtoMessage() {}

func (x *NodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_nodeconfig_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfig.ProtoReflect.Descriptor instead.
func (*NodeConfig) Descriptor() ([]byte, []int) {
	return file_nodeconfig_proto_rawDescGZIP(), []int{0}
}

func (x *NodeConfig) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeConfig) GetMainVppInterface() *NodeConfig_InterfaceConfig {
	if x != nil {
		return x.MainVppInterface
	}
	return nil
}

func (x *NodeConfig) GetOtherVppInterfaces() []*NodeConfig_InterfaceConfig {
	if x != nil {
		return x.OtherVppInterfaces
	}
	return nil
}

func (x *NodeConfig) GetStealInterface() string {
	if x != nil {
		return x.StealInterface
	}
	return ""
}

func (x *NodeConfig) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *NodeConfig) GetNatExternalTraffic() bool {
	if x != nil {
		return x.NatExternalTraffic
	}
	return false
}

// InterfaceConfig stores configuration for a single interface.
type NodeConfig_InterfaceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// interface name to which the configuration applies
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	// ip address to statically assign to the interface
	Ip string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// if enabled, the interface will be assigned IP address dynamically via DHCP protocol
	UseDhcp bool `protobuf:"varint,3,opt,name=use_dhcp,json=useDhcp,proto3" json:"use_dhcp,omitempty"`
}

func (x *NodeConfig_InterfaceConfig) Reset() {
	*x = NodeConfig_InterfaceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nodeconfig_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfig_InterfaceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfig_InterfaceConfig) ProtoMessage() {}

func (x *NodeConfig_InterfaceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_nodeconfig_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfig_InterfaceConfig.ProtoReflect.Descriptor instead.
func (*NodeConfig_InterfaceConfig) Descriptor() ([]byte, []int) {
	return file_nodeconfig_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NodeConfig_InterfaceConfig) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *NodeConfig_InterfaceConfig) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NodeConfig_InterfaceConfig) GetUseDhcp() bool {
	if x != nil {
		return x.UseDhcp
	}
	return false
}

var File_nodeconfig_proto protoreflect.FileDescriptor

var file_nodeconfig_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xa9, 0x03, 0x0a, 0x0a, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x70,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x70, 0x70, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x76, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x56, 0x70,
	0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x30,
	0x0a, 0x14, 0x6e, 0x61, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e, 0x61,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x1a, 0x63, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x5f, 0x64, 0x68, 0x63, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x44, 0x68, 0x63, 0x70, 0x42, 0x03, 0x5a, 0x01, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_nodeconfig_proto_rawDescOnce sync.Once
	file_nodeconfig_proto_rawDescData = file_nodeconfig_proto_rawDesc
)

func file_nodeconfig_proto_rawDescGZIP() []byte {
	file_nodeconfig_proto_rawDescOnce.Do(func() {
		file_nodeconfig_proto_rawDescData = protoimpl.X.CompressGZIP(file_nodeconfig_proto_rawDescData)
	})
	return file_nodeconfig_proto_rawDescData
}

var file_nodeconfig_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_nodeconfig_proto_goTypes = []interface{}{
	(*NodeConfig)(nil),                 // 0: model.NodeConfig
	(*NodeConfig_InterfaceConfig)(nil), // 1: model.NodeConfig.InterfaceConfig
}
var file_nodeconfig_proto_depIdxs = []int32{
	1, // 0: model.NodeConfig.main_vpp_interface:type_name -> model.NodeConfig.InterfaceConfig
	1, // 1: model.NodeConfig.other_vpp_interfaces:type_name -> model.NodeConfig.InterfaceConfig
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_nodeconfig_proto_init() }
func file_nodeconfig_proto_init() {
	if File_nodeconfig_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nodeconfig_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nodeconfig_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfig_InterfaceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nodeconfig_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nodeconfig_proto_goTypes,
		DependencyIndexes: file_nodeconfig_proto_depIdxs,
		MessageInfos:      file_nodeconfig_proto_msgTypes,
	}.Build()
	File_nodeconfig_proto = out.File
	file_nodeconfig_proto_rawDesc = nil
	file_nodeconfig_proto_goTypes = nil
	file_nodeconfig_proto_depIdxs = nil
}
