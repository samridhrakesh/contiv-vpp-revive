// Copyright (c) 2017 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: policy.proto

// Package policy defines data model for Kubernetes Network Policy.

package policy

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PolicyType selects the rule types that the network policy relates to.
// By default, rule types are determined based on the existence of Ingress or
// Egress rules: policies that contain an Egress section are assumed to affect
// Egress, and all policies (whether or not they contain an Ingress section)
// are assumed to affect Ingress.
// For example, policies are egress-only if and only if policyType is set
// to EGRESS.
// Likewise, policies blocking all egress traffic are either EGRESS
// or INGRESS_AND_EGRESS as they do not include an Egress section and would
// otherwise default to just INGRESS.
// This field is beta-level in Kubernetes 1.8.
// +optional
type Policy_PolicyType int32

const (
	Policy_DEFAULT            Policy_PolicyType = 0
	Policy_INGRESS            Policy_PolicyType = 1
	Policy_EGRESS             Policy_PolicyType = 2
	Policy_INGRESS_AND_EGRESS Policy_PolicyType = 3
)

// Enum value maps for Policy_PolicyType.
var (
	Policy_PolicyType_name = map[int32]string{
		0: "DEFAULT",
		1: "INGRESS",
		2: "EGRESS",
		3: "INGRESS_AND_EGRESS",
	}
	Policy_PolicyType_value = map[string]int32{
		"DEFAULT":            0,
		"INGRESS":            1,
		"EGRESS":             2,
		"INGRESS_AND_EGRESS": 3,
	}
)

func (x Policy_PolicyType) Enum() *Policy_PolicyType {
	p := new(Policy_PolicyType)
	*p = x
	return p
}

func (x Policy_PolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_PolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_proto_enumTypes[0].Descriptor()
}

func (Policy_PolicyType) Type() protoreflect.EnumType {
	return &file_policy_proto_enumTypes[0]
}

func (x Policy_PolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Policy_PolicyType.Descriptor instead.
func (Policy_PolicyType) EnumDescriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0, 0}
}

// Operator represents a key's relationship to a set of values.
type Policy_LabelSelector_LabelExpression_Operator int32

const (
	Policy_LabelSelector_LabelExpression_IN             Policy_LabelSelector_LabelExpression_Operator = 0
	Policy_LabelSelector_LabelExpression_NOT_IN         Policy_LabelSelector_LabelExpression_Operator = 1
	Policy_LabelSelector_LabelExpression_EXISTS         Policy_LabelSelector_LabelExpression_Operator = 2
	Policy_LabelSelector_LabelExpression_DOES_NOT_EXIST Policy_LabelSelector_LabelExpression_Operator = 3
)

// Enum value maps for Policy_LabelSelector_LabelExpression_Operator.
var (
	Policy_LabelSelector_LabelExpression_Operator_name = map[int32]string{
		0: "IN",
		1: "NOT_IN",
		2: "EXISTS",
		3: "DOES_NOT_EXIST",
	}
	Policy_LabelSelector_LabelExpression_Operator_value = map[string]int32{
		"IN":             0,
		"NOT_IN":         1,
		"EXISTS":         2,
		"DOES_NOT_EXIST": 3,
	}
)

func (x Policy_LabelSelector_LabelExpression_Operator) Enum() *Policy_LabelSelector_LabelExpression_Operator {
	p := new(Policy_LabelSelector_LabelExpression_Operator)
	*p = x
	return p
}

func (x Policy_LabelSelector_LabelExpression_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_LabelSelector_LabelExpression_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_proto_enumTypes[1].Descriptor()
}

func (Policy_LabelSelector_LabelExpression_Operator) Type() protoreflect.EnumType {
	return &file_policy_proto_enumTypes[1]
}

func (x Policy_LabelSelector_LabelExpression_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Policy_LabelSelector_LabelExpression_Operator.Descriptor instead.
func (Policy_LabelSelector_LabelExpression_Operator) EnumDescriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

// The protocol (TCP or UDP) which traffic must match.
// If not specified, this field defaults to TCP.
// +optional
type Policy_Port_Protocol int32

const (
	Policy_Port_TCP Policy_Port_Protocol = 0
	Policy_Port_UDP Policy_Port_Protocol = 1
)

// Enum value maps for Policy_Port_Protocol.
var (
	Policy_Port_Protocol_name = map[int32]string{
		0: "TCP",
		1: "UDP",
	}
	Policy_Port_Protocol_value = map[string]int32{
		"TCP": 0,
		"UDP": 1,
	}
)

func (x Policy_Port_Protocol) Enum() *Policy_Port_Protocol {
	p := new(Policy_Port_Protocol)
	*p = x
	return p
}

func (x Policy_Port_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_Port_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_proto_enumTypes[2].Descriptor()
}

func (Policy_Port_Protocol) Type() protoreflect.EnumType {
	return &file_policy_proto_enumTypes[2]
}

func (x Policy_Port_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Policy_Port_Protocol.Descriptor instead.
func (Policy_Port_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Port reference type.
type Policy_Port_PortNameOrNumber_Type int32

const (
	Policy_Port_PortNameOrNumber_NUMBER Policy_Port_PortNameOrNumber_Type = 0
	Policy_Port_PortNameOrNumber_NAME   Policy_Port_PortNameOrNumber_Type = 1
)

// Enum value maps for Policy_Port_PortNameOrNumber_Type.
var (
	Policy_Port_PortNameOrNumber_Type_name = map[int32]string{
		0: "NUMBER",
		1: "NAME",
	}
	Policy_Port_PortNameOrNumber_Type_value = map[string]int32{
		"NUMBER": 0,
		"NAME":   1,
	}
)

func (x Policy_Port_PortNameOrNumber_Type) Enum() *Policy_Port_PortNameOrNumber_Type {
	p := new(Policy_Port_PortNameOrNumber_Type)
	*p = x
	return p
}

func (x Policy_Port_PortNameOrNumber_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_Port_PortNameOrNumber_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_proto_enumTypes[3].Descriptor()
}

func (Policy_Port_PortNameOrNumber_Type) Type() protoreflect.EnumType {
	return &file_policy_proto_enumTypes[3]
}

func (x Policy_Port_PortNameOrNumber_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Policy_Port_PortNameOrNumber_Type.Descriptor instead.
func (Policy_Port_PortNameOrNumber_Type) EnumDescriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

// Policy describes what network traffic is allowed for a set of Pods.
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the policy unique within the namespace.
	// Cannot be updated.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace the policy is inserted into.
	// An empty namespace is equivalent to the "default" namespace, but "default"
	// is the canonical representation used in the key for a key-value store.
	// Cannot be updated.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// A list of labels attached to this policy.
	// +optional
	Label []*Policy_Label `protobuf:"bytes,3,rep,name=label,proto3" json:"label,omitempty"`
	// Pods to which this policy applies. The array of ingress rules is applied
	// to all pods selected by this field. Multiple network policies can select
	// the same set of pods. In such case, the ingress rules for each are combined
	// additively.
	// This field is NOT optional and follows standard label selector semantics.
	// An empty selector matches all pods in this namespace.
	Pods       *Policy_LabelSelector `protobuf:"bytes,4,opt,name=pods,proto3" json:"pods,omitempty"`
	PolicyType Policy_PolicyType     `protobuf:"varint,5,opt,name=policy_type,json=policyType,proto3,enum=policy.Policy_PolicyType" json:"policy_type,omitempty"`
	// List of ingress rules applied to the selected pods.
	// Traffic is allowed to a pod if there are no network policies selecting the pod
	// OR if the traffic source is the pod's local node,
	// OR if the traffic matches at least one ingress rule across all of the network
	// policies applied to the pod.
	// If there are no ingress rules then this network policy does not allow
	// any traffic (and serves solely to ensure that the selected pods are isolated
	// by default).
	// +optional
	IngressRule []*Policy_IngressRule `protobuf:"bytes,6,rep,name=ingress_rule,json=ingressRule,proto3" json:"ingress_rule,omitempty"`
	// List of egress rules to be applied to the selected pods.
	// Outgoing traffic is allowed if there are no network policies selecting
	// the pod OR if the traffic matches at least one egress rule across
	// all of the network policies applied to the pod.
	// If there are no egress rules then this network policy does not allow
	// any outgoing traffic (and serves solely to ensure that the selected pods
	// are isolated by default).
	// This field is beta-level in Kubernetes 1.8.
	// +optional
	EgressRule []*Policy_EgressRule `protobuf:"bytes,7,rep,name=egress_rule,json=egressRule,proto3" json:"egress_rule,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0}
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Policy) GetLabel() []*Policy_Label {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Policy) GetPods() *Policy_LabelSelector {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *Policy) GetPolicyType() Policy_PolicyType {
	if x != nil {
		return x.PolicyType
	}
	return Policy_DEFAULT
}

func (x *Policy) GetIngressRule() []*Policy_IngressRule {
	if x != nil {
		return x.IngressRule
	}
	return nil
}

func (x *Policy) GetEgressRule() []*Policy_EgressRule {
	if x != nil {
		return x.EgressRule
	}
	return nil
}

// Label is a key/value pair attached to an object (namespace in this case).
// Labels are used to organize and to select subsets of objects.
type Policy_Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Policy_Label) Reset() {
	*x = Policy_Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Label) ProtoMessage() {}

func (x *Policy_Label) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Label.ProtoReflect.Descriptor instead.
func (*Policy_Label) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Policy_Label) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Policy_Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// A label selector is a label query over a set of resources.
// The result of match_label-s and match_expression-s are ANDed.
// An empty label selector matches all objects. A null label selector matches
// no objects.
type Policy_LabelSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of labels that a resource needs to have attached in order to get
	// selected.
	// +optional
	MatchLabel []*Policy_Label `protobuf:"bytes,1,rep,name=match_label,json=matchLabel,proto3" json:"match_label,omitempty"`
	// A list of key-value expressions applied to labels.
	// For a given resource and its labels, all expressions must evaluate
	// to TRUE for the resource to get selected.
	MatchExpression []*Policy_LabelSelector_LabelExpression `protobuf:"bytes,2,rep,name=match_expression,json=matchExpression,proto3" json:"match_expression,omitempty"`
}

func (x *Policy_LabelSelector) Reset() {
	*x = Policy_LabelSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_LabelSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_LabelSelector) ProtoMessage() {}

func (x *Policy_LabelSelector) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_LabelSelector.ProtoReflect.Descriptor instead.
func (*Policy_LabelSelector) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Policy_LabelSelector) GetMatchLabel() []*Policy_Label {
	if x != nil {
		return x.MatchLabel
	}
	return nil
}

func (x *Policy_LabelSelector) GetMatchExpression() []*Policy_LabelSelector_LabelExpression {
	if x != nil {
		return x.MatchExpression
	}
	return nil
}

// A port selector.
type Policy_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol Policy_Port_Protocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=policy.Policy_Port_Protocol" json:"protocol,omitempty"`
	// If specified, the port on the given protocol.
	// This can either be a numerical or named port on a pod.
	// If this field is not provided, the rule matches all port names and
	// numbers.
	// If present, only traffic on the specified protocol AND port
	// will be matched.
	// +optional
	Port *Policy_Port_PortNameOrNumber `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Policy_Port) Reset() {
	*x = Policy_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Port) ProtoMessage() {}

func (x *Policy_Port) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Port.ProtoReflect.Descriptor instead.
func (*Policy_Port) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Policy_Port) GetProtocol() Policy_Port_Protocol {
	if x != nil {
		return x.Protocol
	}
	return Policy_Port_TCP
}

func (x *Policy_Port) GetPort() *Policy_Port_PortNameOrNumber {
	if x != nil {
		return x.Port
	}
	return nil
}

// A selector for a set of pods.
type Policy_Peer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is a label selector which selects Pods in this namespace.
	// If present but empty, this selector selects all pods in this namespace.
	// +optional
	Pods *Policy_LabelSelector `protobuf:"bytes,1,opt,name=pods,proto3" json:"pods,omitempty"`
	// Selects namespaces using cluster scoped-labels.
	// This matches all pods in all namespaces selected by this label selector.
	// If present but empty, this selector selects all namespaces.
	// +optional
	Namespaces *Policy_LabelSelector `protobuf:"bytes,2,opt,name=namespaces,proto3" json:"namespaces,omitempty"`
	IpBlock    *Policy_Peer_IPBlock  `protobuf:"bytes,3,opt,name=ip_block,json=ipBlock,proto3" json:"ip_block,omitempty"`
}

func (x *Policy_Peer) Reset() {
	*x = Policy_Peer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Peer) ProtoMessage() {}

func (x *Policy_Peer) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Peer.ProtoReflect.Descriptor instead.
func (*Policy_Peer) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Policy_Peer) GetPods() *Policy_LabelSelector {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *Policy_Peer) GetNamespaces() *Policy_LabelSelector {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *Policy_Peer) GetIpBlock() *Policy_Peer_IPBlock {
	if x != nil {
		return x.IpBlock
	}
	return nil
}

// Ingress rule matches traffic if and only if the traffic matches both port-s
// AND from.
type Policy_IngressRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of ports made accessible on the pods selected for this policy.
	// Each item in this list is combined using a logical OR.
	// If the array is empty or null, then this ingress rule matches all ports
	// (traffic not restricted by port).
	// If the array is non-empty, then this ingress rule allows traffic
	// only if the traffic matches at least one port in the list.
	// +optional
	Port []*Policy_Port `protobuf:"bytes,1,rep,name=port,proto3" json:"port,omitempty"`
	// List of sources which are able to access the pods selected for this
	// policy.
	// Items in this list are combined using a logical OR operation.
	// If the array is empty or null, then this ingress rule matches all sources
	// (traffic not restricted by source).
	// If the array is non-empty, then this ingress rule allows traffic only
	// if the traffic matches at least one item in the from list.
	// +optional
	From []*Policy_Peer `protobuf:"bytes,2,rep,name=from,proto3" json:"from,omitempty"`
}

func (x *Policy_IngressRule) Reset() {
	*x = Policy_IngressRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_IngressRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_IngressRule) ProtoMessage() {}

func (x *Policy_IngressRule) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_IngressRule.ProtoReflect.Descriptor instead.
func (*Policy_IngressRule) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Policy_IngressRule) GetPort() []*Policy_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *Policy_IngressRule) GetFrom() []*Policy_Peer {
	if x != nil {
		return x.From
	}
	return nil
}

// Egress rule matches traffic if and only if the traffic matches both port-s
// AND to.
// This field is beta-level in Kubernetes 1.8.
type Policy_EgressRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of destination ports for outgoing traffic.
	// Each item in this list is combined using a logical OR.
	// If the array is empty or null, then this egress rule matches all ports
	// (traffic not restricted by port).
	// If the array is non-empty, then this egress rule allows traffic
	// only if the traffic matches at least one port in the list.
	// +optional
	Port []*Policy_Port `protobuf:"bytes,1,rep,name=port,proto3" json:"port,omitempty"`
	// List of destinations for outgoing traffic of pods selected for this policy.
	// Items in this list are combined using a logical OR operation.
	// If the array is empty or null, this egress rule matches all destinations
	// (traffic not restricted by destination).
	// If the array is non-empty, then this egress rule allows traffic only
	// if the traffic matches at least one item in the to list.
	// +optional
	To []*Policy_Peer `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
}

func (x *Policy_EgressRule) Reset() {
	*x = Policy_EgressRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_EgressRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_EgressRule) ProtoMessage() {}

func (x *Policy_EgressRule) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_EgressRule.ProtoReflect.Descriptor instead.
func (*Policy_EgressRule) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Policy_EgressRule) GetPort() []*Policy_Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *Policy_EgressRule) GetTo() []*Policy_Peer {
	if x != nil {
		return x.To
	}
	return nil
}

// An expression that contains values, a label key, and an operator that
// relates the key and values.
type Policy_LabelSelector_LabelExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is the label key that the expression applies to.
	Key      string                                        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Operator Policy_LabelSelector_LabelExpression_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=policy.Policy_LabelSelector_LabelExpression_Operator" json:"operator,omitempty"`
	// An array of string values.
	// If the operator is IN or NOT_IN, the values array must be non-empty.
	// If the operator is EXISTS or DOES_NOT_EXIST, the values array
	// must be empty.
	// +optional
	Value []string `protobuf:"bytes,3,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *Policy_LabelSelector_LabelExpression) Reset() {
	*x = Policy_LabelSelector_LabelExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_LabelSelector_LabelExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_LabelSelector_LabelExpression) ProtoMessage() {}

func (x *Policy_LabelSelector_LabelExpression) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_LabelSelector_LabelExpression.ProtoReflect.Descriptor instead.
func (*Policy_LabelSelector_LabelExpression) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Policy_LabelSelector_LabelExpression) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Policy_LabelSelector_LabelExpression) GetOperator() Policy_LabelSelector_LabelExpression_Operator {
	if x != nil {
		return x.Operator
	}
	return Policy_LabelSelector_LabelExpression_IN
}

func (x *Policy_LabelSelector_LabelExpression) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

// Numerical or named port.
type Policy_Port_PortNameOrNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Policy_Port_PortNameOrNumber_Type `protobuf:"varint,1,opt,name=type,proto3,enum=policy.Policy_Port_PortNameOrNumber_Type" json:"type,omitempty"`
	// Port number from the range: 0 < x < 65536.
	Number int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// Port name as defined by containers in the pod.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Policy_Port_PortNameOrNumber) Reset() {
	*x = Policy_Port_PortNameOrNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_Port_PortNameOrNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Port_PortNameOrNumber) ProtoMessage() {}

func (x *Policy_Port_PortNameOrNumber) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Port_PortNameOrNumber.ProtoReflect.Descriptor instead.
func (*Policy_Port_PortNameOrNumber) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Policy_Port_PortNameOrNumber) GetType() Policy_Port_PortNameOrNumber_Type {
	if x != nil {
		return x.Type
	}
	return Policy_Port_PortNameOrNumber_NUMBER
}

func (x *Policy_Port_PortNameOrNumber) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Policy_Port_PortNameOrNumber) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// IPBlock describes a particular CIDR (Ex. "192.168.1.1/24") that is allowed
// to/from the pods selected for this network policy. The except entries
// describe CIDRs that should not be included within this rule.
type Policy_Peer_IPBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CIDR is a string representing the IP Block.
	// Valid examples are "192.168.1.1/24".
	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	// Except is a slice of CIDRs that should not be included within an IP Block
	// Valid examples are "192.168.1.1/24".
	// Except values are inside the CIDR range.
	// +optional
	Except []string `protobuf:"bytes,2,rep,name=except,proto3" json:"except,omitempty"`
}

func (x *Policy_Peer_IPBlock) Reset() {
	*x = Policy_Peer_IPBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy_Peer_IPBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Peer_IPBlock) ProtoMessage() {}

func (x *Policy_Peer_IPBlock) ProtoReflect() protoreflect.Message {
	mi := &file_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Peer_IPBlock.ProtoReflect.Descriptor instead.
func (*Policy_Peer_IPBlock) Descriptor() ([]byte, []int) {
	return file_policy_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Policy_Peer_IPBlock) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *Policy_Peer_IPBlock) GetExcept() []string {
	if x != nil {
		return x.Except
	}
	return nil
}

var File_policy_proto protoreflect.FileDescriptor

var file_policy_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x9b, 0x0c, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x30, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x70, 0x6f, 0x64,
	0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a,
	0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0b,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0a, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x2f, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xee, 0x02, 0x0a, 0x0d, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x57, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xcc, 0x01, 0x0a, 0x0f,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x51, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a, 0x08, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x1a, 0xb6, 0x02, 0x0a, 0x04, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x38, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x9b, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x01, 0x22, 0x1c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44,
	0x50, 0x10, 0x01, 0x1a, 0xe5, 0x01, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04,
	0x70, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x3c,
	0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08,
	0x69, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x2e, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x07, 0x69, 0x70, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x35, 0x0a, 0x07, 0x49, 0x50, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x1a, 0x5f, 0x0a, 0x0b, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x1a, 0x5a, 0x0a, 0x0a,
	0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x03, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_policy_proto_rawDescOnce sync.Once
	file_policy_proto_rawDescData = file_policy_proto_rawDesc
)

func file_policy_proto_rawDescGZIP() []byte {
	file_policy_proto_rawDescOnce.Do(func() {
		file_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_policy_proto_rawDescData)
	})
	return file_policy_proto_rawDescData
}

var file_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_policy_proto_goTypes = []interface{}{
	(Policy_PolicyType)(0),                             // 0: policy.Policy.PolicyType
	(Policy_LabelSelector_LabelExpression_Operator)(0), // 1: policy.Policy.LabelSelector.LabelExpression.Operator
	(Policy_Port_Protocol)(0),                          // 2: policy.Policy.Port.Protocol
	(Policy_Port_PortNameOrNumber_Type)(0),             // 3: policy.Policy.Port.PortNameOrNumber.Type
	(*Policy)(nil),                                     // 4: policy.Policy
	(*Policy_Label)(nil),                               // 5: policy.Policy.Label
	(*Policy_LabelSelector)(nil),                       // 6: policy.Policy.LabelSelector
	(*Policy_Port)(nil),                                // 7: policy.Policy.Port
	(*Policy_Peer)(nil),                                // 8: policy.Policy.Peer
	(*Policy_IngressRule)(nil),                         // 9: policy.Policy.IngressRule
	(*Policy_EgressRule)(nil),                          // 10: policy.Policy.EgressRule
	(*Policy_LabelSelector_LabelExpression)(nil),       // 11: policy.Policy.LabelSelector.LabelExpression
	(*Policy_Port_PortNameOrNumber)(nil),               // 12: policy.Policy.Port.PortNameOrNumber
	(*Policy_Peer_IPBlock)(nil),                        // 13: policy.Policy.Peer.IPBlock
}
var file_policy_proto_depIdxs = []int32{
	5,  // 0: policy.Policy.label:type_name -> policy.Policy.Label
	6,  // 1: policy.Policy.pods:type_name -> policy.Policy.LabelSelector
	0,  // 2: policy.Policy.policy_type:type_name -> policy.Policy.PolicyType
	9,  // 3: policy.Policy.ingress_rule:type_name -> policy.Policy.IngressRule
	10, // 4: policy.Policy.egress_rule:type_name -> policy.Policy.EgressRule
	5,  // 5: policy.Policy.LabelSelector.match_label:type_name -> policy.Policy.Label
	11, // 6: policy.Policy.LabelSelector.match_expression:type_name -> policy.Policy.LabelSelector.LabelExpression
	2,  // 7: policy.Policy.Port.protocol:type_name -> policy.Policy.Port.Protocol
	12, // 8: policy.Policy.Port.port:type_name -> policy.Policy.Port.PortNameOrNumber
	6,  // 9: policy.Policy.Peer.pods:type_name -> policy.Policy.LabelSelector
	6,  // 10: policy.Policy.Peer.namespaces:type_name -> policy.Policy.LabelSelector
	13, // 11: policy.Policy.Peer.ip_block:type_name -> policy.Policy.Peer.IPBlock
	7,  // 12: policy.Policy.IngressRule.port:type_name -> policy.Policy.Port
	8,  // 13: policy.Policy.IngressRule.from:type_name -> policy.Policy.Peer
	7,  // 14: policy.Policy.EgressRule.port:type_name -> policy.Policy.Port
	8,  // 15: policy.Policy.EgressRule.to:type_name -> policy.Policy.Peer
	1,  // 16: policy.Policy.LabelSelector.LabelExpression.operator:type_name -> policy.Policy.LabelSelector.LabelExpression.Operator
	3,  // 17: policy.Policy.Port.PortNameOrNumber.type:type_name -> policy.Policy.Port.PortNameOrNumber.Type
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_policy_proto_init() }
func file_policy_proto_init() {
	if File_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_LabelSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Peer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_IngressRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_EgressRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_LabelSelector_LabelExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Port_PortNameOrNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy_Peer_IPBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_policy_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_policy_proto_goTypes,
		DependencyIndexes: file_policy_proto_depIdxs,
		EnumInfos:         file_policy_proto_enumTypes,
		MessageInfos:      file_policy_proto_msgTypes,
	}.Build()
	File_policy_proto = out.File
	file_policy_proto_rawDesc = nil
	file_policy_proto_goTypes = nil
	file_policy_proto_depIdxs = nil
}
